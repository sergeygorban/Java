package design_patterns.abstract_factory;

/*
Назначение.
    1. Обеспечивает создание семейств взаимосвязанных или зависящих друг от друга объектов, без указания их
       конкретных класов

Область применения.
Рекомендуется использовать в следующих случаях:
    1. система не должна зависеть от того, как создаются, компонуются и представляются входящие в нее объекты;
    2. входящие в семейство взаимосвязанные объекты должны использоваться вместе и необходимо обеспечить выполнение
    этого ограничения;
    3. система должна конфигурироваться одним из семейств составляющих ее объектов;
    4. необходимо предоставить библиотеку объектов, раскрывая только их интерфейсы, но не реализацию.

Участники.
    1. AbstractFactory - Абстрактный класс или интерфейс, который определяет механизмы создания абстрактных продуктов;
    2. AbstractProduct - Абстрактный класс или интерфейс, который описывает поведение объекта, который будет
       использоваться;
    3. ConcreteFactory - Класс, созданный от класса AbstractFactory и реализующий методы получения одного или
       нескольких конкретных продуктов;
    4. ConcreteProduct - Класс, созданный от класса AbstractProduct или реализующий интерфейс AbstractProduct.
       Определяет объект-продукт, создаваемый соответствующей конкретной фабрикой; реализует интерфейс Abstract Product;
    5. Client - пользуется исключительно интерфейсами, которые объявлены в классах AbstractFactory и AbstractProduct.

Преимущества и недостатки:
    1. Изолирует конкретные классы
    2. Упрощает замену семейств продуктов
    3. Гарантирует сочетаемость продуктов
    4. Внедрить новый вид продуктов трудно

*/


public class common_data {

}
