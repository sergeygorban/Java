package generics_11;

/* Главный смысл обобщений заключается в возможности создавать безопасные с точки зрения
типов коллекции. Иными словами, обобщения не позволят вам передать объект Dog туда,
где ожидается Duck.

Класс считается обобщенным, если его объявление содержит типовой параметр. Аналогично
обобщенные методы содержат в своей сигнатуре типовые параметры.

public <T extends Animal> void get() - такая запись говорит, что метод может принимать
тип данных Animal или его любой дочерний класс, а также если Animal является интерфейсом,
то и классы, которые реализуют интерфейс Animal.

<> - это ромбовидный оператор, потому что угловые скобки, напоминают ромб. Синтаксис
ромбовидного оператора используется вместе с операцией new. Компилятор проверяет,
что именно происходит с новым значением. Если оно присваивается переменной,
передается методу или возвращается из метода, то компилятор сначала проверяет
обобщенный тип переменной, параметра или метода, а затем заключает этот тип в угловые скобки.

Обобщенное программирование означает написание кода, который может быть неоднократно использован с объектами самых разных типов.


*/


import java.util.ArrayList;

public class Generics {

    public static void main(String[] args) {

        ArrayList<String> arrayList = new ArrayList<>();

    }
}
