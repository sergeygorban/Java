package Logging_32;

import java.util.logging.Level;
import java.util.logging.Logger;

/* С целью упростить отладку
программ в подобном режиме предусмотрен прикладной программный интерфейс
API для протоколирования. Ниже перечислены основные преимущества его применения:
    1. Все протокольные записи нетрудно запретить или разрешить.
    2. Запрещенные протокольные записи отнимают немного ресурсов и не влияют
       на эффективность работы приложения.
    3. Протокольные записи можно направить разным обработчикам, вывести
       на консоль, записать в файл и т.п.
    4. Регистраторы и обработчики способны фильтровать записи. Фильтры отбрасывают ненужные записи по критериям, предоставляемым теми, кто реализует
       фильтры.
    5. Протокольные записи допускают форматирование. Их можно, например,
       представить в виде простого текста или в формате XML.
    6. В приложениях можно использовать несколько протоколов, имеющих иерархические имена, подобные именам пакетов, например com.mycompany.myapp.
    7. По умолчанию параметры настройки протоколирования задаются в конфигурационном файле. Такой способ задания параметров может быть изменен
       приложении.

В профессионально разработанном приложении, как правило, все записи
не накапливаются в одном глобальном протоколе, поэтому можно определить свои
собственные средства протоколирования.

Регистратор, на который больше не делается ссылка ни в одной из переменных, собирается
в “мусор”. Во избежание этого следует сохранить ссылку на регистратор в статической переменной

Как и имена пакетов, имена регистраторов образуют иерархию. На самом деле
они являются еще более иерархическими, чем имена пакетов. Если между пакетом
и его предшественником нет никакой семантической связи, то регистратор и производные от него регистраторы обладают общими свойствами. Так, если в регистраторе
"com.mycompany" задать определенный уровень протоколирования, то производный
от него регистратор унаследует этот уровень.
Существует семь уровней протоколирования:
• SEVERE
• WARNING
• INFO
• CONFIG
• FINE
• FINER
• FINEST
По умолчанию используются первые три уровня, остальные нужно задавать, вызывая метод setLevel ()


*/
public class Logging {

     /* Создание собственного регистратора */
    private static final Logger myLog = Logger.getLogger("MAIN");

    public static void main(String[] args) {

        /* Запрет использования регистратора */
        //Logger.getGlobal().setLevel(Level.OFF);

        /* Использование глобального регистратора */
        Logger.getGlobal().info("!!!!!!!!!!!!!!!!!!!");

        /* Задание уровня регистратора. Будут регистрироваться все сообщения, начиная с уровня FINE и выше.*/
        myLog.setLevel(Level.FINE);

        Thread.dumpStack();



    }
}
