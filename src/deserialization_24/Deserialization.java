package deserialization_24;

/* Десериализация - это востановление объекта
Смысл сериализации объекта заключается в возможности его восстановления
обратно к оригинальному состоянию, уже при другом «запуске» JVM (которая
может быть даже не той же самой JVM, запущенной при сериализации объекта).
Десериализация во многом похожа на сериализацию в обратном порядке.

При десериализации JVM пытается восстановить объект, создавая его новый
экземпляр в куче. Он будет иметь такое же состояние, как и сериализованный
объект во время сериализации. Восстановится все, кроме переходных переменных
(отмеченные как transient), которые вернутся либо пустыми (для объектных ссылок),
либо в виде простейших значений, установленных по умолчанию.


Файл - Объукт читается в виде байтов FileInputStream - FileInputStream подключается к ObjectInputStream,
ObjectInputStream преобразует байты в объект - Получаем востановленный объект

Процесс десериализации:
    1. Объект читается из потока.
    2. JVM определяет (по информации, сохраненной вместе с сериализованным объектом) тип
    класса объекта.
    3. JVM пытается найти и загрузить класс объекта. Если она не может найти и/или
    загрузить класс, то вызывает исключение и десериализация  завершается неудачей.
    4. Для нового объекта выделяется место в куче, но конструктор сериализованного объекта не
    запускается! Очевидно, если бы конструктор запускался, то это восстановило бы состояние
    объекта к его оригинальному «новому» состоянию, но это нам не нужно. Требуется, чтобы объект
    восстановился к состоянию, которое имел при сериализации, а не при первом создании.
    5. Если у объекта есть несериализуемый класс где-нибудь на вершине его иерархии наследования,
    то конструктор этого класса будет запущен  вместе с любыми конструкторами выше него (даже
    если они будут сериализуемыми). Как только начнется соединение конструкторов, вы уже
    не сможете остановить его. Это значит, что все родительские классы, начиная с первого
    несериализуемого, будут заново инициализироваться.
    6. Переменным объекта присваивают значения из сериализованнсго состояния. Переходным
    переменным присваивают пустое значение (для ссылок на объекты) или значение по умолчанию
    (0, false и т. д.), если речь идет о простых типах.






*/

import serialization_23.Serialization;

import java.io.*;

public class Deserialization {

    public static void main(String[] args) throws IOException, ClassNotFoundException {

        FileInputStream fileOutputStream = new FileInputStream("Obj.ser");
        ObjectInputStream objectInputStream = new ObjectInputStream(fileOutputStream);

        /* readObject читает объекты в том порядке, в котором они были записаны
        при сериализации. Значение, возвращаемое методом readObject(), имеет тип Object,
        поэтому десериализованные объекты должны быть приведены к их реальным типам. */
        Serialization one = (Serialization) objectInputStream.readObject();
        Serialization two = (Serialization) objectInputStream.readObject();
        objectInputStream.close();

        System.out.println(one.getAge());
        System.out.println(two.getAge());
    }


}
