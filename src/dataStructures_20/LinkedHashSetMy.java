package dataStructures_20;

/* Классы LinkedHashSet и LinkedHashMap запоминают порядок ввода в них элементов. Таким образом, можно избежать
кажущегося случайным порядка расположения элементов в хеш-таблице. По мере ввода элементов в таблицу они присоединяются к двунаправленному связному списку


Связное хеш-отображение позволяет сменить порядок ввода на порядок доступа
для перебора его элементов. При каждом вызове метода get () или put () затрагиваемый элемент удаляется из его текущей позиции и вводится в конце связного списка
элементов. (Затрагивается только позиция в связном списке элементов, а не в группах
хеш-таблицы. Элемент всегда остается на том месте, которое соответствует хеш-коду
его ключа.)

Порядок доступа удобен для реализации дисциплины кеширования с так называемым "наиболее давним использованием". Допустим, требуется сохранять часто
используемые элементы в памяти и вводить менее часто используемые элементы
из базы данных. Если нужный элемент не обнаруживается в таблице, а таблица уже
почти заполнена, тогда можно получить итератор таблицы и удалить несколько первых элементов, которые он перечисляет. Ведь эти элементы использовались очень
давно. Данный процесс можно даже автоматизировать. Для этого достаточно образовать подкласс, производный от класса LinkedHashMap, и переопределить в нем следующий метод:
protected boolean removeEldestEntry(Map.Entry<K, V> eldest)

И тогда при вводе нового элемента будет удаляться самый старый (eldest) элемент всякий раз, когда данный метод возвратит логическое значение true.



*/
public class LinkedHashSetMy {
}
