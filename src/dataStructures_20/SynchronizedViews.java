package dataStructures_20;

/* Если обращение к коллекции происходит из нескольких потоков исполнения, то
нужно каким-то образом исключить ее непреднамеренное повреждение. Было бы,
например, губительно, если бы в одном потоке исполнения была предпринята попытка ввести элемент в хеш-таблицу в тот момент, когда в другом потоке производилось бы повторное хеширование ее элементов.
Вместо реализации потокобезопасных классов разработчики библиотеки коллекций воспользовались механизмом представлений, чтобы сделать потокобезопасными
обычные коллекции. Например, статический метод synchronizedMap () из класса
Collections может превратить любое отображение в объект типа Мар с синхронизированными методами доступа следующим образом:
Map<String, Employee> map =
Collections.synchronizedMap(new HashMap<String, Employee>());
После этого к объекту map можно обращаться из нескольких потоков исполнения.
Такие методы, как get () и put (), сериализованы. Это означает, что каждый вызов
метода должен полностью завершаться до того, как другой поток сможет его вызвать.

*/

public class SynchronizedViews {
}
