package dataStructures_20;


/* MapMy - отображение или ассоциативный массив.

Отображение применяется, когда нужно найти что-нибудь по ключу.
Коллекции, в которых используются пары «ключ — значение».
Отображению известно значение, которое связано с данным ключом.
У вас может быть два ключа, ссылающихся на одно и то же значение,
но они не могут дублироваться. В качестве ключей, как правило,
используются строковые имена (например, так создаются списки
свойств имя/значение), но ключом также может выступать любой объект.

Каждый элемент в отображении на самом деле состоит из двух
объектов: ключа и значения. У вас могут быть совпадающие
значения, но дублирование ключей не допускается.

В отображении хранятся пары "ключ-значение". Следовательно, значение можно найти,
если предоставить связанный с ним ключ. Например, можно составить и сохранить
таблицу записей о сотрудниках, где ключами служат идентификаторы сотрудников,
а значениями — объекты типа Employee.

В библиотеке коллекций Java предоставляются две реализации отображений общего назначения: классы HashMap и ТгееМар, реализующие интерфейс Мар. Хеш-отображение типа HashMap хеширует ключи, а древовидное отображение типа ТгееМар
использует общий порядок ключей для организации поискового дерева. Функции
хеширования или сравнения применяются только к ключам. Значения, связанные
с ключами, не хешируются и не сравниваются.
Когда же следует применять хеш-отображение, а когда — древовидное отображение? Как и во множествах, хеширование выполняется немного быстрее, и поэтому
хеш-отображение оказывается более предпочтительным, если не требуется перебирать ключи в отсортированном порядке.

Ключи должны быть однозначными. Нельзя сохранить два значения по одинаковым ключам. Если дважды вызвать метод put () с одним и тем же ключом, то второе
значение заменит первое. По существу, метод put () возвращает предыдущее значение, сохраненное по ключу, указанному в качестве его параметра.

*/

import java.util.HashMap;

public class MapMy {

    public static void main(String[] args) {

        HashMap<String, Integer> hashMap = new HashMap<String, Integer>();

        // "Cat" - ключ, 54 - значение
        hashMap.put("Cat", 54);
        hashMap.put("Dog", 23);
        hashMap.put("Meet", 100);
        hashMap.put("Foo", 23);

        System.out.println(hashMap);
        System.out.println(hashMap.get("Foo"));
    }
}
