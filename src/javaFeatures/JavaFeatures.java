package javaFeatures;


/*
1. Простота
2. Объектно-ориентированный: это методика программирования, в
центре внимания которой находятся данные (т.е. объекты) и
интерфейсы этих объектов.

3. Распределенный: Язык Java предоставляет разработчику
обширную библиотеку программ для передачи данных по протоколу
TCP/IP, HTTP и FTP. Приложения на Java способны открывать
объекты и получать к ним доступ по сети с такой же легкостью,
как и в локальной файловой системе, используя URL для адресации

4. Надежность. Язык Java предназначен для написания программ,
которые должны надежно работать в любых условиях. Основное
внимание в этом языке уделяется раннему обнаружению возможных
ошибок, контролю в процессе выполнения программы, а также устранению
ситуаций, которые могут вызвать ошибки...
Компилятор Java выявляет такие ошибки, которые в других языках
обнаруживаются только на этапе выполнения программы.

5. Безопасность: Ниже перечислены некоторые виды нарушения защиты,
которые с самого начала предотвращает система безопасности Java:
    Намеренное переполнение стека выполняемой программы — один из
    распространенных способов нарушения защиты, используемых
    вирусами и "червями".
    Повреждение данных на участках памяти, находящихся за пределами
    пространства, выделенного процессу.
    Несанкционированное чтение файлов и их модификация.
    Модули Java, подключаемые к браузерам, больше не доверяют
    удаленному коду, если отсутствует цифровая подпись этого кода и
    согласие пользователей на его выполнение.

6. Независимость от архитектуры компьютера: Компилятор генерирует
объектный файл, формат которого не зависит от архитектуры компьютера.
Скомпилированная программа может выполняться на любых процессорах, а
для ее работы требуется лишь исполняющая система Java. Код, генерируемый
компилятором Java, называется байт-кодом. Он разработан таким
образом, чтобы его можно было легко интерпретировать на любой машине
или оперативно преобразовать в ее машинный код.

7. Переносимость: Фиксированная разрядность числовых типов данных
позволяет избежать многих неприятностей, связанных с выполнением
программ на разных компьютерах. Двоичные данные хранятся и передаются
в неизменном формате, что также позволяет избежать недоразумений,
связанных с разным порядком следования байтов на различных платформах.
Символьные строки сохраняются в стандартном формате Юникода.

8. Строго типизированный: Тип каждой переменной должен быть объявлен

9. Переносимость: Фиксированная разрядность числовых типов данных
позволяет избежать многих неприятностей, связанных с выполнением
программ на разных компьютерах. Двоичные данные хранятся и передаются
в неизменном формате, что также позволяет избежать недоразумений,
связанных с разным порядком следования байтов на различных платформах.
Символьные строки сохраняются в стандартном формате Юникода.
Библиотеки Java отлично справляются, позволяя разработчикам работать,
не привязываясь к конкретной платформе. В частности, они могут
пользоваться файлами, регулярными выражениями, XML-разметкой,
датами и временем, базами данных, сетевыми соединениями, потоками
исполнения и прочими средствами, не опираясь на базовую операционную
систему. Программы на Java не только становятся переносимыми, но и
прикладные программные интерфейсы Java API нередко оказываются более
высокого качества, чем их платформенно-ориентированные аналоги.

10. Интепретируемость: Интерпретатор Java может выполнять байт-код
непосредственно на любой машине, на которую перенесен интерпретатор

11. Производительность: "Обычно интерпретируемый байт-код имеет
достаточную производительность, но бывают ситуации, когда требуется
еще более высокая производительность. Байт-код можно транслировать
во время выполнения программы в машинный код для того процессора,
на котором выполняется данное приложение".
На ранней стади развития Java многие пользователи были не согласны
с утверждением, что производительности "более чем достаточно".
Но теперь динамические компиляторы (называемые иначе JIT-компиляторами)
настолько усовершенствованы, что могут конкурировать с традиционными
компиляторами, а в некоторых случаях они даже дают выигрыш в
производительности, поскольку имеют больше доступной информации.
Так, например, динамический компилятор может отслеживать код,
который выполняется чаще, и оптимизировать по быстродействию только
эту часть кода. Динамическому компилятору известно, какие именно
классы были загружены. Он может сначала применить встраивание, когда
некоторая функция вообще не переопределяется на основании загруженной к
оллекции классов, а затем отменить, если потребуется, такую оптимизацию.

12. Многопоточность

13. Динамичность
*/


public class JavaFeatures {
}
