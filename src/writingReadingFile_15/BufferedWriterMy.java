package writingReadingFile_15;

/* Не пользоваться буфером — все равно что
покупать товары без тележки. Вам пришлось
бы тащить каждую вещь к своей машине по
очереди: всего одну банку с супом или один
рулон туалетной бумаги за один раз.

Буфер дает временное хранилище для объектов, пока
держатель (как тележка) не заполниться. Благодаря
буферу вам прийдется делать меньше рейсов

"java" строка - записывается в буфер вместе с
другими строками благодаря BufferedWriterMy
(поток работающий с симвлами) - BufferedWriterMy,
когда буфер заполняется, соединяется с FileWriter (записывает символы, а не байты)
и все строки записываються в файл - Файл

Гораздо эффективнее работать с буфером, чем без него. Вы можете
заполнить файле помощью метода write(someString), используя только
FileWriter, но объекту придется записывать отдельно каждый элемент,
который вы передаете в файл. Это ненужные издержки, так как каждое
обращение к диску — важное событие по сравнению с манипуляцией
данными в памяти. После присоединения BufferedWriterMy к FileWriter
первый будет хранить все записанные вами элементы, пока не
заполнится. FileWriter начнет запись в файл на диск, когда буфер заполнится.
Если же вы хотите отослать данные до заполнения буфера, то можете
это сделать. Нужно просто сбросить его. Вызов метода writer.flush()
говорит: «Сейчас же отошли все, что находится в буфере!» */


import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class BufferedWriterMy {

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("fileForWriting.txt"));
        bufferedWriter.write("QQQQQQQQQQQQQQQQQQQQQQQ");
        bufferedWriter.close();
    }
}
