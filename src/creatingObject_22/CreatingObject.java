package creatingObject_22;


/* Инкапсуляция (иногда называемая сокрытием информации) — это ключевое
понятие для работы с объектами. Формально инкапсуляцией считается
обычное объединение данных и операций над ними в одном пакете или классе
и сокрытие данных от других объектов.
Основной принцип инкапсуляции заключается
в запрещении прямого доступа к полям экземпляра данного класса из других классов.
Программы должны взаимодействовать с данными объекта только через методы
этого объекта. Инкапсуляция обеспечивает внутреннее поведение объектов, что
имеет решающее значение для повторного их использования и надежности работы
программ. Это означает, что в классе можно полностью изменить способ хранения
данных. Но поскольку для манипулирования данными используются одни и те же
методы, то об этом ничего не известно, да и не особенно важно другим объектам.

Конструирование объекта на основе некоторого класса называется
получением экземпляра этого класса.

1. Статические переменные в классе инициализируются перед
    тем, как появится возможность создать объект этого класса.
    2. Статические переменные инициализируются до того, как
    сможет быть запущен любой статический метод класса. */

/* Создание объекта:
    1. Объявление ссылочной переменной.
    2. Вызов конструктора и Создание объекта
    3. Инициализация */


import fields_3.Fields;

public class    CreatingObject extends ObjectMy {

    private int weight;
    private String color;
    private Fields fields;

    public CreatingObject() {
        System.out.println("Constructor from CreatingObject");
    }

    public void get() {
        System.out.println("Get");
    }

    public static void main(String[] args) {


        /* 1. Объявление ссылочной переменной.
        Ссыочная переменная - это переменная, которая ссылается на объект
        Данная переменная, хранит ссылку на объект */

        CreatingObject object;

        /* 2. Вызов конструктора класса. Осуществляется
        оператором new CreatingObject(), в результате чего
        создается объект, в области памяти под названием Куча
        При создании объекта конструкторы вызываются по цепочке наследования снизу до
        Object*/

        /* 3. Инициализация (присвоение значения)
        Ссылочной переменной object присваивается значние ссылки
        на созданный объект */

        object = new CreatingObject();

        /* Общая запись*/
        CreatingObject object1 = new CreatingObject();
        object1.get();



         /* После создания объекта, поля экземпляра класса с значениями
        хранятся в объекте, который в свою очередь хранится в куче.
        Не важно, где объекты были объявлены или созданы, они всегда находятся в куче
        Так как все классы являются наследниками Object, то при создании любого объекта, кроме Object,
        внутри созданного объекта содержиться внутреннее ядро, представляющее часть самого Object.
        Если есть цепочка наследования, то внутри созданного объекта содержаться и части родительских
        классов
*/

        /* Размер объекта - это сумма размера всех полей простого типа и ссылочного типа
        Размер object1 = 4 байта (поле int) + размер для поля String + размер ссылк на
        объект Fields (в зависимости от JVM) + если есть цепочка наследования, то учитываются
        и размеры родительских объектов*/

        System.out.println("Main");

        /*Все методы и локальные переменные размещаются в стеке, как и конструкторы
        Последовательность создания объекта object1:
            1. Метод Main помещается на вершину стека
            2. Метод get помещается на вершину стека выше Main
            3. Вызывается конструктор класса CreatingObject и помещается в стек выше метода get
            4. Вызывается конструктор класса ObjectMy и помещается в стек выше конструктора CreatingObject
            5. Вызывается конструктор класса Object и помещается в стек выше конструктора ObjectMy
            6. Работа конструктора Object завершается, удаляется из стека, передавая управление
            конструктору класса ObjectMy (Вывод Constructor from ObjectMy )
            7. Работа конструктора ObjectMy завершается, удаляется из стека, передавая управление
            конструктору класса CreatingObject (Вывод Constructor from CreatingObject)
            8. Работа конструктора CreatingObject завершается, удаляется из стека, передавая управление
            методу get (Вывод Get)
            9. Работа метода get завершается, удаляется из стека, передавая управление
            методу Main (Вывод Main)*/

    }
}
