package exceptions_25;

/* Когда в методе генерируется исключение, оставшиеся в нем операторы не выполняются.
Если же в методе задействованы какие-нибудь локальные ресурсы, о которых
известно лишь ему, то освободить их уже нельзя. Можно, конечно, перехватить и повторно
сгенерировать все исключения, но это не совсем удачное решение, поскольку
ресурсы нужно освобождать в двух местах: в обычном коде и в коде исключения.
В языке Java принято лучшее решение — организовать блок finally. Рассмотрим
применение этого блока на примере того, как правильно закрывать файл. Работая
с базами данных, можно применять тот же самый подход, чтобы правильно разорвать соединение с
базой данных. Как будет показано в главе 4 второго тома настоящего издания, разрывать
соединение с базой данных необходимо даже в том случае,
если при выполнении программы возникло исключение.
Код в блоке finally выполняется независимо от того, возникло исключение или нет.

Рассмотрим три возможных ситуации, в которых программа выполняет блок finally.
    1. Код не генерирует никаких исключений. В этом случае программа сначала
       полностью выполняет блок try, а затем блок finally.
    2. Код генерирует исключение, которое перехватывается в блоке catch. В этом случае программа
       сначала выполняет блок try до той точки, в которой возникает исключение, а остальная часть
       блока try пропускается. Затем программа выполняет код из соответствующего блока catch и,
       наконец, код из блока finally.
    3. Код генерирует исключение, которое не обрабатывается в блоке catch. В этом
       случае программа выполняет блок try вплоть до той точки, в которой генерируется исключение,
       а оставшаяся часть блока try пропускается. Затем программа выполняет код из блока finally и
       передает исключение обратно вызывающей части программы.

Конструкцию finally на самом деле следует применять всякий раз, когда требуется освободить
используемый ресурс.

Если в блоке finally имеется оператор return, результаты его выполнения могут
быть неожиданными. Допустим, в середине блока tr y происходит возврат из метода с помощью
оператора return . Перед тем как передать управление вызывающей части программы, следует
выполнить блок finally. Если и в нем имеется оператор return, то первоначально возвращаемое
значение будет замаскировано.
*/


public class Finally {

    public void createExe1 (int a) {

        try {
            if (a < 1) {

                throw new Exception();
            } else if (a == 3) {

                throw new RuntimeException();
            }
        } catch (Exception e) {

            System.out.println("Exception occurred");
            e.printStackTrace();
        }
        finally {
            System.out.println("!!!!!!!!!!!! Always");
        }
    }

    public int createExe (int a) {

        try {

            int b = 1 + a;
            return b;
        } finally {
            if (a == 2 ) return 0;
        }
    }

    public static void main(String[] args) {
        Finally fi = new Finally();
        fi.createExe1(1);
        System.out.println(fi.createExe(2));
    }




}
