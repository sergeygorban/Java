package exceptions_25;


/* ИСКЛЮЧЕНИЯ

Обработкой исключений - это механизм перехвата ошибок.
Основное назначение механизма обработки исключений — передать данные
обработчику исключений из того места, где возник сбой.

Ошибки, рассматриваемые в первую очередь:
    1. Ошибки ввода. Неверный ввод адресса
    2. Сбои оборудования.
    3. Физические ограничения. Диск может оказаться переполненным, а оперативная
       память — исчерпанной.
    4. Ошибки программирования. Какой-нибудь метод может работать неправильно.
       Например, он может возвращать неверный результат или некорректно вызывать
       другие методы. Выход за допустимые границы массива, попытка найти
       несуществующий элемент в хеш-таблице, извлечение элемента из пустого стека —
       все это характерные примеры ошибок программирования.

В языке Java объект исключения всегда является экземпляром класса, производного от класса Throwable
Если стандартных классов недостаточно, можно создавать и свои собственные классы исключений.

Иерархия класса Error описывает внутренние ошибки и ситуации, возникающие в связи с нехваткой ресурсов в исполняющей
системе Java.

При программировании на Java основное внимание следует уделять иерархии
класса Exception. Эта иерархия также разделяется на две ветви: исключения, производные от класса
RuntimeException, и остальные. Исключения типа RuntimeException возникают вследствие ошибок
программирования. Все другие виды исключений являются следствием непредвиденного стечения обстоятельств,
например, ошибок ввода-вывода, возникающих при выполнении вполне корректных программ.
Исключения, производные от класса RuntimeException, связаны со следующими
программными ошибками:
    1. Неверное приведение типов.
    2. Выход за пределы массива.
    3. Попытка обратиться к объекту по пустой ссылке null.
    4. Остальные исключения возникают в следующих случаях.
    5. Попытка чтения по достижении конца файла.
    6. Попытка открыть несуществующий файл.
    7. Попытка получить объект типа Class, если в символьной строке указан несуществующий класс.


Исключения типа RuntimeException практически всегда возникают по вине программиста. Так, исключения типа ArraylndexOutBoundsException можно избежать,
если всегда проверять индексы массива. А исключение NullPointerException никогда не возникнет, если перед тем, как воспользоваться переменной, проверить, не
содержит ли она пустое значение null.

Объявить, что метод может генерировать исключение, можно, включив в его заголовок описание исключения,
к примеру public void createE(int a) throws RuntimeException

Если же метод может генерировать несколько проверяемых исключений, все они
должны быть перечислены в его заголовке через запятую

Но внутренние ошибки, т.е. исключения, производные от класса Error, объявлять
не нужно. Такие исключения могут генерироваться любыми методами, а самое главное, что они не поддаются никакому контролю.
Точно так же совсем не обязательно объявлять непроверяемые исключения, производные от класса RuntimeException


Если исключение возникает и нигде не перехватывается, то программа прекращает
работу, выводя на консоль сообщение о типе исключения и содержимое стека.

Если код в блоке tr y не генерирует исключение, то программа пропускает блок
catch. А если какой-нибудь из операторов блока tr y сгенерирует исключение, отличающееся от типа, указанного в
блоке catch, то выполнение данной части программы (в частности, вызываемого метода) немедленно прекращается. (Остается только
надеяться, что в вызывающей части программы все же предусмотрен перехват исключения данного типа.)




Иключение - это непредвиденная ситуация, которая может произойти
во время выполнения метода (нет соединения с базой данных и т.д)
Исключение — это всегда объект типа Exception. Родительским
классом для всех исключений является класс Exception.

Методы могут выбрасывать исключения или обрабатывать их

Выбрасывание исключений:
Метод выбрасывает исключение с помощью
ключевого слова throw, за которым следует объект
Exception: throw new NoCaffeineException();
Метод, который может выбросить исключение, обязан
объявить об этом с помощью выражения
throws Exception (для проверяемых исключений) или не объявлять
выражение throws Exception (для не проверяемых исключений).
Когда метод выбрасывает исключение, которое не обрабатывается,
программа завершает свою работу и последующие методы не
выполняються

Метод может выбрасывать сразу несколько исключений, если он в этом
очень нуждается. Но при объявлении метода нужно указать все
проверяемые исключения, которые он может выбросить (хотя, если два
или больше из них имеют общего предка, можно ограничиться одним
родительским классом).

Обработка исключения:
код, который может вызвать исключение,
заключается в блок try, код, который обрабатывает исключение
заключается в блоке catch
Содержимое блока catch зависит от исключения, которое было
выброшено. Например, если сервер не отвечает, вы можете
использовать блок catch для попытки связаться с другим сервером.
Если файла не оказалось на месте, можно попросить пользователя помочь
его найти.
Блок try/catch предназначен для обработки исключительных
ситуаций, а не дефектов кода. Используйте его, чтобы
исправлять действия, успешность которых вы не можете
гарантировать. В крайнем случае выведите пользователю сообщение
и трассировку стека, чтобы была возможность выяснить, что
произошло.

При обработке исключений можно использовать всего один
блок catch, указывая родительский класс Exception.
Тогда вы сумеете перехватить любое исключение, которое может быть
выброшено.

Для исключений, которые необходимо обрабатывать уникальным образом
необходимо создавать отдельные блоки catch

Блоки catch должны располагаться по возрастанию, то есть первым
ставиться блок с классом исключения, который в цепочки наследования
находится на самом низшем уровне. Если, к примеру, первым будет стоять
Exception, а потом RuntimeException, то всегда будет обрабатываться
исключение класса Exception. Если порядок будет нарушен, то
компилятор сообщит об этом

Блоки catch одного уровня могут располагаться в любом порядке, так
как не способны перехватить чужие исключения





Finally — это блок для кода, который должен выполниться
независимо от того, было ли выброшено исключение.

Если блок try завершился неудачей (исключением), то управление
программным потоком немедленно перейдет к блоку catch. По завершении
catch выполняется блок finally, после которого, в свою
очередь, продолжает выполняться метод.

Если блок try завершился успешно (без выброса исключения),
то управление программным потоком пропускает блок catch и
переходит к finally, после которого, в свою очередь, продолжает
выполняться метод

Если блоки try или catch содержат оператор return, то finally
все равно будет выполняться! Поток перейдет к finally,
после чего вернется к return.

Рекомендаций относительно применения и обработки исключений в прикладных программах:
    1. Обработка исключений не может заменить собой простую проверку. Перехват исключения
       занимает намного больше времени, чем простая проверка.
       Из этого следует вывод: пользуйтесь исключениями только в тех случаях, когда это
       оправданно, что зачастую бывает лишь в исключительных ситуациях.
    2. Отделяет нормальную обработку данных от обработки исключений.
    3. Правильно пользуйтесь возможностями, которые предоставляет иерархия наследования исключений.
       Не ограничивайтесь генерированием только исключения типа RuntimeException. Найдите подходящий
       подкласс или создайте собственный. Не перехватывайте исключение типа Throwable.
       При таком подходе ваш код становится трудным для понимания и сопровождения. Правильно различайте
       проверяемые и непроверяемые исключения. Для обработки проверяемых исключений требуются
       дополнительные усилия, поэтому не применяйте их для уведомления о логических ошибках.
    4. Не подавляйте исключения. Подавление исключений - это использование пустого блока catch
    5. Не бойтесь передавать исключения для обработки в коде, разрабатываемом другими.
       Зачастую предпочтительнее передать исключение другому обработчику, а не обрабатывать
       его самостоятельно. Методы более высокого уровня лучше оснащены средствами уведомления
       пользователей об ошибках или отмены выполнения неверных операций.

*/



public class Exceptions {


    // Объявление и Выбрасывание исключения
    public void createE(int a) throws RuntimeException {
        if (a < 1) {
            throw new RuntimeException("exception occurred");
        }
    }


    // Обработка исключения
    public void createExe (int a) {

        try {
            if (a < 1) {
                throw new Exception();
            }
        } catch (Exception e) {
            System.out.println("exception occurred");
            e.printStackTrace();
        }
    }

    // Несколько catch и finally
    public void createExe1 (int a) {

        try {
            if (a < 1) {

                throw new Exception();
            } else if (a == 3) {

                throw new RuntimeException();
            }
        } catch (RuntimeException e) {

            System.out.println("RuntimeException occurred");
            e.printStackTrace();

        } catch (Exception e) {

            System.out.println("Exception occurred");
            e.printStackTrace();
        }
        finally {
            System.out.println("!!!!!!!!!!!! Always");
        }
    }

    // Несколько исключений в методе
    public void get(int a) throws Exception,RuntimeException {
        if (a < 1) {
            throw new Exception();
        }
    }

    public static void main(String[] args) {

        Exceptions exceptions = new Exceptions();

        //exceptions_25.createE(0);
        exceptions.createExe(0);
        exceptions.createExe1(3);

        System.out.println("!!!!!!!!!!!!!!!");

    }
}
