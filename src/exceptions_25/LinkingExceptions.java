package exceptions_25;

/* Исключение можно генерировать и в блоке catch, образуя тем самым цепочку
исключений. Обычно это делается для того, чтобы изменить тип исключения. Так,
если разрабатывается подсистема для применения другими разработчиками, то
имеет смысл генерировать такие исключения, которые давали бы возможность сразу
определить, что ошибка возникла именно в этой подсистеме. В качестве характерного
примера можно привести исключение типа ServletException. Вполне возможно,
что в коде, где выполняется сервлет, совсем не обязательно иметь подробные сведения о том, какая именно возникла ошибка, а важно лишь знать, что сервлет работает
некорректно.
*/


public class LinkingExceptions {

    public int verefy(int a) {
        try {
            if (a != 1) {
                throw new Exception("!!!!!!!!!!!!");
            }
        } catch (Exception e) {

            throw new OwnExceptions("ERROR" + e.getMessage());
        }

        return a;
    }

    /* Позволяет извлекать предыдущее исключение. Настоятельно рекомендуется
    именно такой способ заключения исключений в оболочку. Ведь он позволяет
    генерировать исключения более высокого уровня, не теряя подробных сведений об исходном исключении.
    Рассмотренный способ заключения в оболочку оказывается удобным в том случае,
    если перехват исключения осуществляется в методе, которому не разрешается генерировать проверяемые исключения.
    Проверяемое исключение можно перехватить и заключить его в оболочку исключения времени выполнения.*/

    public int verefy1(int a) {
        try {
            if (a != 1) {
                throw new Exception("!!!!!!!!!!!!");
            }
        } catch (Exception e) {

            OwnExceptions se = new OwnExceptions("ERROR");
            se.initCause(e);
            System.out.println(se.getCause());
            throw se;
        }

        return a;
    }



    public static void main(String[] args) {
        LinkingExceptions exceptions = new LinkingExceptions();

        //exceptions.verefy(0);
        exceptions.verefy1(0);

    }
}
