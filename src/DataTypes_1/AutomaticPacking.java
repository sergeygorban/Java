package DataTypes_1;


/* АВТОМАТИЧЕСКАЯ УПАКОВКА

Это преобразование между примитивом и его оберткой, которое
происходит автоматически

Свойства:
    1. Аргументы методов. Если метод принимает тип-обертку,
можно передавать ему как ссылку на объект, так и значение
соответствующего простого типа. Обратное утверждение тоже
верно — если метод принимает примитив, то можно передать
ему либо значение совместимого с ним простого типа, либо
ссылку на обертку.

    2. Возвращаемые значения. Если при объявлении метода указан
простой тип возвращаемого значения, то можно возвращать как
совместимый примитив, так и ссылку на обертку.
И если при объявлении использовалась обертка, можно возвращать
либо ссылку на нее, либо значение простого типа, которое ей
соответствует.

    3. Булевы выражения Везде, где ожидается булево
значение, можно указывать либо выражение, которое возвращает
boolean, либо булев примитив, либо ссылку на обертку Boolean.

    4. Операции с числами. Можно использовать типы-обертки в качестве
операнда там, где ожидается простой тип. Это означает, что вы можете
применить, скажем, оператор инкремента к ссылке на объект Integer!
Но не волнуйтесь — это всего лишь ухищрения со стороны компилятора.
Перед операцией он просто преобразует объект в значение простого
типа.

    5. Операции присваивания Можно присваивать переменной либо обертку,
либо примитив, если эта переменная имеет соответствующий тип. К примеру,
переменная простого типа int может быть присвоена ссылке на объект
Integer; аналогично  ссылка на объект Integer может быть присвоена
переменной простого типа int.



*/

import java.util.ArrayList;

public class AutomaticPacking {

    // 1.
    public int create(int a) {
        return a + 24;
    }

    // 2.
    public Integer createI(int a) {
        int b = a + 3;
        return b;
    }

    public void automaticPacking () {

        /* При добавлении значения с типом int, компилятор
        автоматически создает обертку*/
        ArrayList<Integer> arrayList = new ArrayList<Integer>();
        arrayList.add(3);

        /* При извлечении компилятор автоматически снимает
        обертку*/
        int a = arrayList.get(0);
    }

    public static void main(String[] args) {

        // 1.
        Integer b = new Integer(12);
        AutomaticPacking packing = new AutomaticPacking();
        System.out.println(packing.create(b));

        // 2.
        System.out.println(packing.createI(3));

        // 4.
        System.out.println(b++);

        // 5.

        int c = new Integer(4);
        int c1 = b;

    }

}
